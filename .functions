# Create a new directory and enter it
function md() {
    mkdir -p $1 && cd $1
}


# find shorthand
function f() {
    find . -name "$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
        open "http://localhost:${port}/"
# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
        python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Copy w/ progress
cp_p () {
    rsync -WavP --human-readable --progress $1 $2
}


# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
    mkdir -p "$1"
        git archive master | tar -x -C "$1"
}


# get gzipped size
function gz() {
    echo "orig size    (bytes): "
        cat "$1" | wc -c
        echo "gzipped size (bytes): "
        gzip -c "$1" | wc -c
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
        echo # newline
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
    if [ -f "$1" ] ; then
        local filename=$(basename "$1")
            local foldername="${filename%%.*}"
            local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
            local didfolderexist=false
            if [ -d "$foldername" ]; then
                didfolderexist=true
                    read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
                    echo
                    if [[ $REPLY =~ ^[Nn]$ ]]; then
                        return
                            fi
                            fi
                            mkdir -p "$foldername" && cd "$foldername"
                            case $1 in
                            *.tar.bz2) tar xjf "$fullpath" ;;
    *.tar.gz) tar xzf "$fullpath" ;;
    *.tar.xz) tar Jxvf "$fullpath" ;;
    *.tar.Z) tar xzf "$fullpath" ;;
    *.tar) tar xf "$fullpath" ;;
    *.taz) tar xzf "$fullpath" ;;
    *.tb2) tar xjf "$fullpath" ;;
    *.tbz) tar xjf "$fullpath" ;;
    *.tbz2) tar xjf "$fullpath" ;;
    *.tgz) tar xzf "$fullpath" ;;
    *.txz) tar Jxvf "$fullpath" ;;
    *.zip) unzip "$fullpath" ;;
    *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
    esac
                    else
                        echo "'$1' is not a valid file"
                            fi
}


# Find a file with a pattern in name:
function ff() {
    find . -type f -iname '*'$*'*' -ls ;
}

function gitk {
    /usr/bin/gitk > /dev/null 2> /dev/null & disown
}

function drive {
    /usr/bin/cvlc --no-audio --no-fullscreen --width 1050 http://$SERVERIP:8081 > /dev/null 2> /dev/null & disown
}

function gvim {
    /usr/bin/gvim -f $* > /dev/null 2> /dev/null & disown
}

# Traverse up the directory using the int supplied
function up {
	local d=""
	limit=$1
	for ((i=1 ; i <= limit ; i++))
	do
		cd ../
	done
}

#netinfo - shows network information for your system
function netinfo {
    echo "--------------- Network Information ---------------"
        /sbin/ifconfig | awk /'inet addr/ {print $2}'
        /sbin/ifconfig | awk /'Bcast/ {print $3}'
        /sbin/ifconfig | awk /'inet addr/ {print $4}'
        /sbin/ifconfig | awk /'HWaddr/ {print $4,$5}'
        myip=`lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | sed '/^$/d; s/^[ ]*//g; s/[ ]*$//g' `
        echo "${myip}"
        echo "---------------------------------------------------"
}

# I want to create an alias that finds text in files
function find-string() {

	# Re-iterate what we're looking for
    echo 'Looking for "'$1'"'

	# Perform a search on all files
    find ./ -xdev -type f -print0 | \

	# process each file through the grep,
	#    --colour=always    = always show the coloured version
	#    --ignore-case      = Search is NOT case-sesitive
	#    --line-number      = Show the line numbers after the filename
	#    --context=1        = This will print 1 line both above and below the line where the string occurs
	#    "${1}"             = Finally search for the passed variable
	        xargs -0 grep --colour=always --ignore-case --line-number --context=${2} "${1}" | \

	# Replace each tab with 2 spaces to cut down on the amount of indentation in
	# the search results from files with large areas of indentation
	        sed -re 's/\t/  /g'

}
