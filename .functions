# Create a new directory and enter it
function md() {
    mkdir -p $1 && cd $1
}


# find shorthand
function f() {
    find . -name "$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
    open "http://localhost:${port}/"
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Copy w/ progress
cp_p () {
    rsync -WavP --human-readable --progress $1 $2
}


# take this repo and copy it to somewhere else minus the .git stuff.
function gitexport(){
    mkdir -p "$1"
        git archive master | tar -x -C "$1"
}


# get gzipped size
function gz() {
    echo "orig size    (bytes): "
        cat "$1" | wc -c
        echo "gzipped size (bytes): "
        gzip -c "$1" | wc -c
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
        echo # newline
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
    if [ -f "$1" ] ; then
        local filename=$(basename "$1")
            local foldername="${filename%%.*}"
            local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
            local didfolderexist=false
            if [ -d "$foldername" ]; then
                didfolderexist=true
                    read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
                    echo
                    if [[ $REPLY =~ ^[Nn]$ ]]; then
                        return
                            fi
                            fi
                            mkdir -p "$foldername" && cd "$foldername"
                            case $1 in
                            *.tar.bz2) tar xjf "$fullpath" ;;
    *.tar.gz) tar xzf "$fullpath" ;;
    *.tar.xz) tar Jxvf "$fullpath" ;;
    *.tar.Z) tar xzf "$fullpath" ;;
    *.tar) tar xf "$fullpath" ;;
    *.taz) tar xzf "$fullpath" ;;
    *.tb2) tar xjf "$fullpath" ;;
    *.tbz) tar xjf "$fullpath" ;;
    *.tbz2) tar xjf "$fullpath" ;;
    *.tgz) tar xzf "$fullpath" ;;
    *.txz) tar Jxvf "$fullpath" ;;
    *.zip) unzip "$fullpath" ;;
    *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
    esac
                    else
                        echo "'$1' is not a valid file"
                            fi
}


# Find a file with a pattern in name:
function ff() {
    find . -type f -iname '*'$*'*' -ls ;
}

function garage {
    /usr/bin/cvlc --no-audio --no-fullscreen --width 1050 http://$SERVERIP:808jj> /dev/null 2> /dev/null & disown
}

function drive {
    /usr/bin/cvlc --no-audio --no-fullscreen --width 1050 http://$SERVERIP:8081 > /dev/null 2> /dev/null & disown
}

# Traverse up the directory using the int supplied
function up {
    limit=$1

    if [ ! $limit ];
    then
        limit=1
    fi

    for ((i=1 ; i <= $limit ; i++))
    do
        cd ../
    done
}

#netinfo - shows network information for your system
function netinfo {
    echo "--------------- Network Information ---------------"
        $(which ifconfig) | $(which awk) /'inet addr/ {print $2}'
        $(which ifconfig) | $(which awk) /'Bcast/ {print $3}'
        $(which ifconfig) | $(which awk) /'inet addr/ {print $4}'
        $(which ifconfig) | $(which awk) /'HWaddr/ {print $4,$5}'
        myip=`lynx -dump -hiddenlinks=ignore -nolist http://checkip.dyndns.org:8245/ | sed '/^$/d; s/^[ ]*//g; s/[ ]*$//g' `
        echo "${myip}"
        echo "---------------------------------------------------"
}

# I want to create an alias that finds text in files
function find-string() {

    # Re-iterate what we're looking for
    echo 'Looking for "'$1'"'

    # Perform a search on all files
    find ./ -xdev -type f -print0 | \

    # process each file through the grep,
    #    --colour=always    = always show the coloured version
    #    --ignore-case      = Search is NOT case-sesitive
    #    --line-number      = Show the line numbers after the filename
    #    --context=1        = This will print 1 line both above and below the line where the string occurs
    #    "${1}"             = Finally search for the passed variable
    xargs -0 grep --colour=always --ignore-case --line-number --context=${2} "${1}" | \

    # Replace each tab with 2 spaces to cut down on the amount of indentation in
    # the search results from files with large areas of indentation
    sed -re 's/\t/  /g'
}

function hl {
    echo "\nListing the last $1 entries in your history, Oh Master\n"
        history | tail -$1
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}
# Check to see if a program exists
# The last command exit status will be 0 if the program does exist
# and 1 if the program does not exist
function programExists() {
    #test command "$1"
    command -v "$1" >/dev/null 2>&1 || { echo >&2 "I require $1 but it's not installed.  Aborting."; return 1; }
}

# Find the package installer that you the current linux system is using
function findInstaller() {
    local installer_list=("equo" "yum" "aptitude")

    for package_manager in "${installer_list[@]}"; do
        programExists "$package_manager"
        if [ $? = 0 ];
        then
            break
        fi
    done

    if [[ "$packageManager" = "equo" ]];
    then
        quite_install="--quiet"
    fi

    export package_manager
    export quiet_install
}

# Find out which distro we are using
function findDistro() {
    distro=$(lsb_release -i | xargs | cut -d':' -f2)
    export distro
}

# Install the provided package
function installPackage() {
    # Check for specialist install file
    echo -e "\n${cyan}Installing package: $1${reset}"
    if [ -f "customInstallers/$1" ];
    then
        echo "${cyan}Custom installer provided so using that${reset}"
        source "customInstallers/$1"
    else
        programExists "$1"
        if [ $? = 1 ];
        then
            echo -e "${cyan}Installing \"$1\"${reset}"
            sudo "$package_manager" install "$1" > $install_log
        else
            echo -e "${green}\"$1\" is already installed so moving on...${reset}"
            return
        fi

        # Check to see if the action was successful
        if [ $? = 0 ];
        then
            echo -e "${light_green}Installation was successful!${reset}"
        else
            echo -e "${light_red}======================================"
            echo -e "There was an error installing $1"
            echo -e "======================================${reset}"
        fi
    fi
}

function makeLink() {
    if ! $skip_links;
    then
        local src=$1
        local dest=$2

        # Check to make sure the source file exists
        if [ ! -e "$src" ];
        then
            echo -e "${light_red}Source file \"$src\" does not exist${reset}"
        fi

        if  [ ! "$overwrite_links" ];
        then
            # Check for an existing destination file
            if [ -e "$dest" ];
            then
                echo -ne "${cr}${light_red}The destination file \"$dest/${src##*/}\" already exists,${cr}${reset}do you wish to overwrite it: (${yellow}Y${reset})es; (${yellow}N${reset})o; (${yellow}A${reset})ll; (${yellow}S${reset})kip all: "
                read -n 1
                if [[ $REPLY =~ ^[Nn]*$ ]];
                then
                    echo -e "\n${light_red}Aborting link${reset}"
                    return
                elif [[ $REPLY =~ ^[aA]*$ ]];
                then
                    echo -e "\n${light_green}Overwriting all existing links${reset}"
                    overwrite_links=true
                elif [[ $REPLY =~ ^[Ss]*$ ]];
                then
                    echo -e "\n${light_red}Skipping all the links until this script is next run${reset}"
                    skip_links=true
                    return
                fi
            fi
        fi

        command $(which ln) --symbolic --force "$src" "$dest"

        if [ $? = 0 ];
        then
            echo -e "${cr}${light_green}Link was made from \"$src\" to \"$dest\"${reset}"
        else
            echo -e "${red}======================================"
            echo -e "There was an error making a link from:"
            echo -e "$src"
            echo -e "    to..."
            echo -e "$dest"
            echo -e "======================================${reset}"
        fi

        export overwrite_links
        export skip_links
    fi
}


# Add a function to change the shell if we are going into the vmcode dir
function skybet() {
    /bin/sh
    cd /vmcode/vmcode
    echo "You are now in ${PWD}"
}
