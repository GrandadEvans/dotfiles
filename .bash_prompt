#!/bin/bash

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM=xterm-256color
fi

function git_info() {
    # check if we're in a git repo
    git rev-parse --is-inside-work-tree &>/dev/null || return

    # quickest check for what branch we're on
    branch=$(git symbolic-ref -q HEAD | sed -e 's|^refs/heads/||')

    # check if it's dirty (via github.com/sindresorhus/pure)
    dirty=$(git diff --quiet --ignore-submodules HEAD &>/dev/null; [ $? -eq 1 ]&& echo -e "${red}⸮${reset}")

    echo "${reset} on${purple}  ${branch} ${dirty}"
}

function last_tests() {
    # Do we need to put a line break in?
    local lb=""
    if (( $COLUMNS < 150 ));
    then
        local lb="${cr}"
    fi

    tests_report=""

    # test to make sure we only proceed if git_info is not empty
    if [[ -n "${refreshed_git_info}" ]];
    then
        git_base=$(git rev-parse --show-toplevel)

        unit_report_file="${git_base}/tests/unit_report.txt" 
        if [ -f "${unit_report_file}" ];
        then
            tests_report=${lb}$(tail -1 "${unit_report_file}")
        fi
    fi
}

function last_coverage() {
    coverage_report=""

    # test to make sure we only proceed if git_info is not empty
    if [[ -n "${refreshed_git_info}" ]];
    then
        git_base=$(git rev-parse --show-toplevel)

        coverage_report_file="${git_base}/tests/coverage_report.txt" 
        coverage_report=$(cat "${coverage_report_file}" | grep "Summary" -A4)
        if [ -f "${coverage_report_file}" ];
        then
            classes_coverage=$(echo "${coverage_report}" | grep "Classes:" | sed -e 's/^\s*Classes:\s*\([0-9]*\).*$/\1/')
            methods_coverage=$(echo "${coverage_report}" | grep "Methods:" | sed -e 's/^\s*Methods:\s*\([0-9]*\).*$/\1/')
            lines_coverage=$(echo "${coverage_report}" | grep "Lines:" | sed -e 's/^\s*Lines:\s*\([0-9]*\).*$/\1/')

            if (( "$classes_coverage" < 35 ));
            then
                classes_coverage_text="\033[30;41m C: ${classes_coverage}% ${reset}"
            elif (( "$classes_coverage" < 70 ));
            then
                classes_coverage_text="\033[30;43m C: ${classes_coverage}% ${reset}"
            else
                classes_coverage_text="\033[30;42m C: ${classes_coverage}% ${reset}"
            fi

            if (( "$lines_coverage" < 35 ));
            then
                lines_coverage_text="\033[30;41m L: ${lines_coverage}% ${reset}"
            elif (( "$lines_coverage" < 70 ));
            then
                lines_coverage_text="\033[30;43m L: ${lines_coverage}% ${reset}"
            else
                lines_coverage_text="\033[30;42m L: ${lines_coverage}% ${reset}"
            fi

            if (( "$methods_coverage" < 35 ));
            then
                methods_coverage_text="\033[30;41m M: ${methods_coverage}% ${reset}"
            elif (( "$methods_coverage" < 70 ));
            then
                methods_coverage_text="\033[30;43m M: ${methods_coverage}% ${reset}"
            else
                methods_coverage_text="\033[30;42m M: ${methods_coverage}% ${reset}"
            fi

            coverage_report="Coverage: ${classes_coverage_text} ${methods_coverage_text} ${lines_coverage_text}"
        fi
    fi
}

function amILoggedInViaSSH() {
    if $SSH_TTY;
    then
        pre_prompt="${green}*******************************${cr}             SSH${cr}*******************************${reset}${cr}"
        logged_in_via_ssh=true
    else
        logged_in_via_ssh=false
    fi
    export logged_in_via_ssh
}

function amILoggedInViaVagrant() {
    if [[ "USER" = "vagrant" ]];
    then
        logged_in_via_vagrant=true
        pre_prompt="${green}*******************************${cr}             VAGRANT${cr}*******************************${reset}${cr}"
    else
        logged_in_via_vagrant=false
    fi
    export logged_in_via_vagrant
}

function get_last_status() {
    if [ $es -eq 0 ];
    then
        status="${green}😊  ${reset}"
    else
        status="${red}😞  ${es}${reset}"
    fi
}

function get_background_jobs() {
    local BKGJBS=$(jobs -r | wc -l | tr -d ' ')
    if [ ${BKGJBS} -gt 2 ]; then
        PS1+="${cr}${red}Background jobs: ${BKGJBS}${reset}"
    elif [ ${BKGJBS} -gt 0 ]; then
        PS1+="${cr}${yellow}Background jobs: ${BKGJBS}${reset}"
    fi
}

function get_stopped_jobs() {
    local STPJBS=$(jobs -s | wc -l | tr -d ' ')
    if [ ${STPJBS} -gt 2 ]; then
        PS1+="${cr}${red}Stopped jobs: ${STPJBS}${reset}"
    elif [ ${STPJBS} -gt 0 ]; then
        PS1+="${cr}${yellow}Stopped jobs: ${STPJBS}${reset}"
    fi
}

PROMPT_COMMAND=__prompt_command

function __prompt_command() {
    es=$?
    get_last_status

    coverage_report=""
    tests_report=""

    time="${yellow}⏱ \A${reset}"
    user="${green}\u${reset}"
    host="${purple}\H${reset}"
    pwd="${yellow}\w${reset}"
    refreshed_git_info="$(git_info)"
    git="${refreshed_git_info}${reset}"
    command_number="${yellow}!\!${reset}"
    
    last_tests
    last_coverage 

    PS1="${cr}${pre_prompt}${status}  ${time}  ${user} on ${host}:${pwd} ${git} ${tests_report} ${coverage_report}${cr}${command_number} \$ "

    get_background_jobs
    get_stopped_jobs
}
